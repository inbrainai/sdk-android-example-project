apply plugin: 'com.android.application'

Properties keystore = new Properties()
try {
    keystore.load(project.rootProject.file('credentials.properties').newDataInputStream())
} catch (Exception e) {
    throw new IllegalStateException("Cannot open credentials.properties: " + e + ".")
}

repositories {
    maven { url "https://jitpack.io" }
}

android {
    compileSdkVersion 33
    signingConfigs {
        release {
            storeFile file('../keystore/release.keystore')
            storePassword '123456'
            keyAlias 'release'
            keyPassword '123456'
        }
    }
    defaultConfig {
        applicationId "com.inbrain.example"
        minSdkVersion 16
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"

        buildConfigField "String", "QA_CLIENT_ID", keystore.getProperty('qa.client_id')
        buildConfigField "String", "QA_CLIENT_SECRET", keystore.getProperty('qa.client_secret')
        buildConfigField "String", "QA_USER_ID", keystore.getProperty('qa.user_id')
        buildConfigField "String", "PROD_CLIENT_ID", keystore.getProperty('prod.client_id')
        buildConfigField "String", "PROD_CLIENT_SECRET", keystore.getProperty('prod.client_secret')
        buildConfigField "String", "PROD_USER_ID", keystore.getProperty('prod.user_id')
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    namespace 'com.inbrain.example'
    applicationVariants.all { variant ->
        changeApkFileName(variant)
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

dependencies {
//    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation 'com.github.inbrainai:sdk-android:2.0.0'

    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
}

def changeApkFileName(variant) {
    variant.outputs.all { output ->
        outputFileName = 'inBrainExample_v.' + android.defaultConfig.versionName + '.' + android.defaultConfig.versionCode + '-' + variant.buildType.name + '.apk'
    }
}